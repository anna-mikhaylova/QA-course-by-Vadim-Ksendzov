{
	"info": {
		"_postman_id": "4d344ff5-baba-4cab-a437-a4fa362bf323",
		"name": "HW2_Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "test_endPoint /first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"// Method: GET\r",
							"\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_endPoint /user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// Method: POST\r",
							"// request form data: \r",
							"// name: str\r",
							"// age: int\r",
							"// salary: int\r",
							"\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let name = jsonData.name\r",
							"pm.test(\"Name is Anna_response\", function () {\r",
							"    pm.expect(jsonData.name).to.eql('Anna');\r",
							"});\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let age = jsonData.age\r",
							"pm.test(\"Age is 27\", function () {\r",
							"    pm.expect(jsonData.age).to.eql('27');\r",
							"});\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let salary = jsonData.salary\r",
							"pm.test(\"Salary is 50000\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(50000);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"let reqData = request.data;\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = reqData.name;\r",
							"pm.test(\"Name_resp = req\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = reqData.age;\r",
							"pm.test(\"Age_resp = req\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = +(reqData.salary);\r",
							"pm.test(\"Salary_resp = req\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let req_salary_1_5_year = +(reqData.salary) * 4;\r",
							"pm.test(\"Salary_1_5_year_resp = req\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "default"
						},
						{
							"key": "age",
							"value": "27",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "50000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_endPoint /object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// Method: GET\r",
							"// request url params: \r",
							"// name: str\r",
							"// age: int\r",
							"// salary: int\r",
							"\r",
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"NAME request = response\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"AGE request = response\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"SALARY request = response\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has a name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name')\r",
							"});\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has an age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age')\r",
							"});\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog's name is Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog is 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Anna&age=27&salary=50000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "50000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "test_endPoint /object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4\r",
							"// Method: GET\r",
							"// request url params: \r",
							"// name: str\r",
							"// age: int\r",
							"// salary: int\r",
							"\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let respData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"NAME request = response\", function () {\r",
							"    pm.expect(respData.name).to.eql(reqData.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"AGE request = response\", function () {\r",
							"    pm.expect(respData.age).to.eql(+reqData.age);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(reqData.salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(respData.salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(respData.salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(respData.salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(respData.salary[2])\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"SALARY request = response\", function () {\r",
							"    pm.expect(respData.salary[0]).to.eql(+reqData.salary);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"SALARY request = response\", function () {\r",
							"    pm.expect(+respData.salary[1]).to.eql(reqData.salary * 2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"SALARY request = response\", function () {\r",
							"    pm.expect(+respData.salary[2]).to.eql(reqData.salary * 3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"// Environments -> Create new enviroment -> Name enviroment \"HW2\" -> Add a new variable \"name\"\r",
							"// 16. Создать в окружении переменную age\r",
							"// Add a new variable \"age\"\r",
							"// 17. Создать в окружении переменную salary\r",
							"// Add a new variable \"salary[0]\"\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", respData.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", respData.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary[0]\", respData.salary[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (let n = 0; n < 3; n++){\r",
							"\tconsole.log(respData.salary[n])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Anna&age=27&salary=50000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Anna"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "50000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "test_endPoint /user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// Method: POST\r",
							"// request form data: \r",
							"// name: str\r",
							"// age: int\r",
							"// salary: int\r",
							"\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// Body -> form-data -> key salary -> {{salary[0]}}\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// key age -> {{age}}\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// key name -> {{name}}\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let respData = pm.response.json();\r",
							"// 7. Спарсить request.\r",
							"let reqData = request.data;\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"There is start_qa_salary\", function () {\r",
							"    pm.expect(respData).to.have.property('start_qa_salary')\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"There is qa_salary_after_6_months\", function () {\r",
							"    pm.expect(respData).to.have.property('qa_salary_after_6_months')\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"There is qa_salary_after_12_months\", function () {\r",
							"    pm.expect(respData).to.have.property('qa_salary_after_12_months')\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"There is qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(respData).to.have.property('qa_salary_after_1.5_year')\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"There is qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(respData).to.have.property('qa_salary_after_3.5_years')\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"There is a person\", function () {\r",
							"    pm.expect(respData).to.have.property('person')\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary (resp) = salary (req)\", function () {\r",
							"    pm.expect(respData.start_qa_salary).to.eql(+reqData.salary)\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months (resp) = salary *2 (req)\", function () {\r",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(+reqData.salary*2)\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months (resp) = salary *2.7 (req)\", function () {\r",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7)\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year (resp) = salary *3.3 (req)\", function () {\r",
							"    pm.expect(respData[\"qa_salary_after_1.5_year\"]).to.eql(+reqData.salary*3.3)\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years (resp) = salary *3.8 (req)\", function () {\r",
							"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.eql(+reqData.salary*3.8)\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person.u_name[1]] (resp) = salary (req)\", function () {\r",
							"    pm.expect(respData.person.u_name[1]).to.eql(+reqData.salary)\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"person.u_age (resp) = age (req)\", function () {\r",
							"    pm.expect(respData.person.u_age).to.eql(+reqData.age)\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years (resp) = salary*4.2 (req)\", function () {\r",
							"    pm.expect(respData.person.u_salary_5_years).to.eql(+reqData.salary*4.2)\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let key in respData.person){\r",
							"    console.log(key, respData.person[key]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary[0]}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
